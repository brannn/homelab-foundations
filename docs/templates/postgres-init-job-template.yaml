# PostgreSQL Initialization Job Template
# Copy this template to your application directory and customize
# Use this for applications that need custom database schema initialization
#
# Usage:
# 1. Copy to clusters/um890/<app-name>/postgres-init-job.yaml
# 2. Replace all APP_* placeholders with actual values
# 3. Customize the initialization script as needed
# 4. Ensure the job runs after PostgreSQL cluster is ready

apiVersion: batch/v1
kind: Job
metadata:
  name: APP_NAME-postgres-init
  namespace: APP_NAMESPACE
  labels:
    app.kubernetes.io/name: APP_NAME-postgres-init
    app.kubernetes.io/component: database-init
    app.kubernetes.io/part-of: APP_NAME
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: APP_NAME-postgres-init
        app.kubernetes.io/component: database-init
        app.kubernetes.io/part-of: APP_NAME
    spec:
      restartPolicy: OnFailure
      containers:
      - name: postgres-init
        image: postgres:16-alpine
        env:
        - name: PGHOST
          value: "APP_NAME-postgres-rw.APP_NAMESPACE.svc.cluster.local"
        - name: PGPORT
          value: "5432"
        - name: PGDATABASE
          value: "APP_DATABASE"
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: APP_NAME-postgres-credentials
              key: username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: APP_NAME-postgres-credentials
              key: password
        command:
        - /bin/sh
        - -c
        - |
          # Wait for PostgreSQL to be ready
          until pg_isready -h $PGHOST -p $PGPORT -U $PGUSER; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          
          echo "PostgreSQL is ready. Running initialization..."
          
          # Example initialization commands
          # Replace with your application-specific schema setup
          
          # Create additional databases if needed
          # psql -c "CREATE DATABASE IF NOT EXISTS additional_db;"
          
          # Create extensions
          # psql -c "CREATE EXTENSION IF NOT EXISTS pg_stat_statements;"
          
          # Run schema migrations
          # psql -f /path/to/schema.sql
          
          echo "Database initialization completed successfully."
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
